#!/usr/bin/env python

import findrox; findrox.version(2,0,0)
import rox, os, sys, popen2, signal
from rox import filer, Menu, tasks, basedir, mime

__builtins__._ = rox.i18n.translation(os.path.join(rox.app_dir, 'Messages'))

import gtk, os, sys, signal, re, string, socket, time, popen2, Queue, pango


APP_NAME = 'Find'
APP_PATH = rox.app_dir

#Options.xml processing
from rox.options import Option
rox.setup_app_options(APP_NAME, site='hayber.us')
Menu.set_save_name(APP_NAME, site='hayber.us')

OPT_FIND_CMD = Option('find_cmd', 'find "$Path" -name "$Files" -exec grep -Hn "$Text" "{}" \;')
OPT_EDIT_CMD = Option('edit_cmd', None)

rox.app_options.notify()


class FindWindow(rox.Window):
	def __init__(self):
		rox.Window.__init__(self)
		self.set_title(APP_NAME)
		self.set_default_size(550, 500)
		
		self.cancel = False
		self.find = False
		self.selected = False
		
		self.toolbar = gtk.Toolbar()
		self.toolbar.set_style(gtk.TOOLBAR_ICONS)
		self.toolbar.insert_stock(gtk.STOCK_CLOSE, _('Close'), None, self.close, None, -1)
		self.show_btn = self.toolbar.insert_stock(gtk.STOCK_GO_UP, _('Show file'), None, self.show_dir, None, -1)
		self.find_btn = self.toolbar.insert_stock(gtk.STOCK_EXECUTE, _('Find'), None, self.find_what_where, '<Enter>', -1)
		self.clear_btn = self.toolbar.insert_stock(gtk.STOCK_CLEAR, _('Clear'), None, self.clear, None, -1)
		self.cancel_btn = self.toolbar.insert_stock(gtk.STOCK_STOP, _('Cancel'), None, self.cancel_find, None, -1)
		self.toolbar.insert_stock(gtk.STOCK_PREFERENCES, _('Settings'), None, self.edit_options, None, -1)

		self.show_btn.set_sensitive(False)
		self.find_btn.set_sensitive(False)
		self.clear_btn.set_sensitive(False)
		self.cancel_btn.set_sensitive(False)

		# Create layout, pack and show widgets
		self.table = gtk.Table(5, 2, False)
		x_pad = 2
		y_pad = 1

		self.path = gtk.Entry(max=255)
		self.browse = gtk.Button(label='...')
		self.table.attach(gtk.Label(_('Path')), 0, 1, 2, 3, 0, 0, 4, y_pad)
		self.table.attach(self.path, 1, 2, 2, 3, gtk.EXPAND|gtk.FILL, 0, x_pad, y_pad)
		self.table.attach(self.browse, 2, 3, 2, 3, 0, 0, x_pad, y_pad)

		self.what = gtk.Entry(max=255)
		self.table.attach(gtk.Label(_('Pattern')),	0, 1, 3, 4, 0, 0, 4, y_pad)
		self.table.attach(self.what,	1, 2, 3, 4, gtk.EXPAND|gtk.FILL, 0, x_pad, y_pad)

		self.where = gtk.Entry(max=255)
		self.table.attach(gtk.Label(_('Files')),	0, 1, 4, 5, 0, 0, 4, y_pad)
		self.table.attach(self.where,	1, 2, 4, 5, gtk.EXPAND|gtk.FILL, 0, x_pad, y_pad)

		#######################################
		swin = gtk.ScrolledWindow()
		self.scroll_window = swin
		swin.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
		swin.set_shadow_type(gtk.SHADOW_IN)

		self.store = gtk.ListStore(str, int, str)
		view = gtk.TreeView(self.store)
		self.view = view
		swin.add(view)
		view.set_rules_hint(True)

		cell = gtk.CellRendererText()
		cell.set_property('ellipsize_set', True)
		cell.set_property('ellipsize', pango.ELLIPSIZE_START)
		column = gtk.TreeViewColumn(_('Filename'), cell, text = 0)
		view.append_column(column)
		column.set_resizable(True)
		column.set_reorderable(True)

		cell = gtk.CellRendererText()
		column = gtk.TreeViewColumn(_('Line'), cell, text = 1)
		view.append_column(column)
		column.set_resizable(True)
		column.set_reorderable(True)

		cell = gtk.CellRendererText()
		column = gtk.TreeViewColumn(_('Text'), cell, text = 2)
		view.append_column(column)
		column.set_resizable(True)
		column.set_reorderable(True)

		view.connect('row-activated', self.activate)
		self.selection = view.get_selection()
		self.selection.connect('changed', self.set_selection)

		self.vbox = gtk.VBox()
		self.add(self.vbox)
		self.vbox.pack_start(self.toolbar, False, False)
		self.vbox.pack_start(self.table, False, False)
		self.vbox.pack_start(swin, True, True)
		self.vbox.show_all()

		self.browse.connect('clicked', self.browser)

		self.what.connect('changed', self.set_sensitives)
		self.where.connect('changed', self.set_sensitives)
		self.path.connect('changed', self.set_sensitives)


	def find_what_where(self, *args):
		self.cancel = False
		self.find = True
		self.set_sensitives()
		where = self.where.get_text()
		what = self.what.get_text()
		path = self.path.get_text()
		cmd = OPT_FIND_CMD.value
		cmd = string.replace(cmd, '$Path', path)
		cmd = string.replace(cmd, '$Files', where)
		cmd = string.replace(cmd, '$Text', what)
		thing = popen2.Popen4(cmd)
		tasks.Task(self.get_status(thing))
		
		
	def cancel_find(self, *args):
		self.cancel = True
		self.set_sensitives()
		
		
	def clear(self, *args):
		self.store.clear()
		self.selected = False
		self.set_sensitives()


	def get_status(self, thing):
		outfile = thing.fromchild
		while True:
			blocker = tasks.InputBlocker(outfile)
			yield blocker
			if self.cancel:
				os.kill(thing.pid, signal.SIGKILL)
				self.cancel = False
				return
			line = outfile.readline()
			if line:
				self.set_sensitives()
				iter = self.store.append(None)
				try:
					(filename, lineno, text) = line.split(':')
					self.store.set(iter, 0, filename, 1, int(lineno), 2, text[:-1])
				except:
					self.store.set(iter, 2, line[:-1])
			else:
				code = thing.wait()
				if code:
					rox.info(_('There was a problem with this search'))
				break
		self.find = False
		self.set_sensitives()
				
				
	def set_sensitives(self, *args):
		path = self.path.get_text()
		what = self.what.get_text()
		where = self.where.get_text()
		
		if len(what) and len(where) and len(path) and not self.find:
			self.find_btn.set_sensitive(True)
		else:
			self.find_btn.set_sensitive(False)
			
		self.clear_btn.set_sensitive(bool(len(self.store)))
		self.cancel_btn.set_sensitive(self.find)
		self.show_btn.set_sensitive(self.selected)
					

	def browser(self, *args):
		browser = gtk.FileChooserDialog(title=_('Select folder'), buttons=(gtk.STOCK_CANCEL, gtk.RESPONSE_CANCEL, gtk.STOCK_OPEN, gtk.RESPONSE_ACCEPT))
		path = self.path.get_text()
		if not len(path):
			path = os.path.expanduser('~')
		browser.set_current_folder(path)
		browser.set_action(gtk.FILE_CHOOSER_ACTION_SELECT_FOLDER)
		if browser.run() != gtk.RESPONSE_CANCEL:
			try:
				path = browser.get_filename()
				self.path.set_text(path)
			except:
				rox.report_exception()
		browser.hide()
		
		
	def set_selection(self, *args):
		self.selected = True
		self.set_sensitives()
		

	def activate(self, view, path, column):
		def get_type_handler(dir, mime_type):
			"""Lookup the ROX-defined run action for a given mime type."""
			path = basedir.load_first_config('MIME-types')
			handler = os.path.join(path, '%s_%s' % (mime_type.media, mime_type.subtype))
			if os.path.exists(handler):
				return handler
			else: #fall back to the base handler if no subtype handler exists
				handler = os.path.join(path, '%s' % (mime_type.media,), '')
				if os.path.exists(handler):
					return handler
				else:
					return None
			
		model, iter = self.view.get_selection().get_selected()
		if iter:
			filename = model.get_value(iter, 0)
			line = model.get_value(iter, 1)
			
			if len(OPT_EDIT_CMD.value):
				cmd = OPT_EDIT_CMD.value
				cmd = string.replace(cmd, '$File', filename)
				cmd = string.replace(cmd, '$Line', str(line))
				popen2.Popen4(cmd)
			else: #use the ROX defined text handler
				mime_type = rox.mime.lookup('text/plain')
				handler = get_type_handler('MIME-types', mime_type)
				handler_appdir = os.path.join(handler, 'AppRun')
				if os.path.isdir(handler) and os.path.isfile(handler_appdir):
					handler = handler_appdir
				if handler:
					popen2.Popen4('%s "%s"' % (handler, filename))
				else:
					rox.info(_('There is no run action defined for text files!'))


	def button_press(self, text, event):
		'''Popup menu handler'''
		if event.button != 3:
			return 0
		self.menu.popup(self, event)
		return 1


	def show_dir(self, *args):
		''' Pops up a filer window. '''
		model, iter = self.view.get_selection().get_selected()
		if iter:
			filename = model.get_value(iter, 0)
			filer.show_file(filename)


	def edit_options(self, *args):
		'''Show Options dialog'''
		rox.edit_options()


	def get_options(self):
		'''Get changed Options'''
		pass


	def delete_event(self, ev, e1):
		'''Bye-bye'''
		self.close()


	def close(self, *args):
		'''We're outta here!'''
		self.destroy()
		

if __name__ == '__main__':
	win = FindWindow()
	win.show()
	rox.mainloop()
